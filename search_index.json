[["index.html", "SAR and Ecotype Project 1 Welcome 1.1 Resources", " SAR and Ecotype Project Kelsey Freitag 2025-07-15 1 Welcome Welcome to the SAR and Ecotype Modeling Project. This website documents the methods and results of the project. Use the navigation panel on the left to explore the following sections: 2. Setup: SAR: Description of data preparation for analyses. 3. Calculate Range Area: SAR: Estimating range areas where published EOOs are unavailable. 4. Score Calculations: SAR: Binning EOOs and calculating SAR scores. 5. Create Grid (10 km x 10 km): Creating 10 km × 10 km grid cells across Canada. 6. Loop Code: SAR: Extracting presence/absence data and applying species scores to each grid cell. 7. Mapping: Static and Interactive: SAR: Mapping SAR scores across Canada and for individual taxonomic groups. 8. Score Calculations: Ecotypes: Calculating ecotype scores across ecozones. 9. Ecozone and Ecotype Raster Generation: Masking the ecotype raster to each ecozone and reclassifying ecotypes to ecozone-specific scores. 10. Ecozone Mosaic: Mosaicking individual ecozones to create a national ecotype map. 11. Mapping: Ecotypes: Creating national combined and individual ecotype maps. 12. Mapping: Ecozones: Creating individual ecozone maps. 1.1 Resources Raw code on GitHub Small data files on GitHub: Data files are located in both the data and outputs folders. Large data files (raster files) on Dropbox Figures on GitHub Interactive maps on Dropbox: Please note, you must download both the .html file and its associated folder containing dependent files for the maps to function correctly. "],["setup-sar.html", "2 Setup: SAR 2.1 Data Preparation", " 2 Setup: SAR 2.1 Data Preparation An initial dataset was downloaded from the Species at Risk Public Registry (SAR Registry), filtered to retain species listed as Endangered, Threatened, or Special Concern. This filtering resulted in a list of 838 species. This list was then cross-referenced with the species range maps from NCC, identifying 441 species with corresponding range maps that were listed in the SAR registry. Published EOO data were gathered where available. For 17 species without published EOOs, their range size was used instead. "],["calculate-range-area-sar.html", "3 Calculate Range Area: SAR 3.1 Overview 3.2 Example: Island Blue 3.3 Full Loop 3.4 Outputs", " 3 Calculate Range Area: SAR 3.1 Overview EOO values were unavailable for 17 species. For these species, total range area was estimated using 1 km² raster maps from NCC. The workflow consisted of the following steps: Load the species’ range raster. Calculate the area of each raster cell (m²). Sum the area of all occupied (non‑NA) cells. Convert the total area to km². Inputs This section uses species range rasters (from NCC) located in: data/raster files 3.1.1 Load Libraries library(terra) library(dplyr) library(knitr) 3.2 Example: Island Blue The code below demonstrates the range area calculation for Island Blue. # Load raster data in for Island Blue range_raster &lt;- rast(&quot;data/raster files/COSEWICID_651_1KM.tif&quot;) # Calculate the cell area in square meters cell_areas &lt;- cellSize(range_raster) # Sum the area of all cells that are not NA (cells where the species is present) # Calculates the total area of all non-NA cells by summing the individual areas total_area_m2 &lt;- global(cell_areas * !is.na(range_raster), &quot;sum&quot;, na.rm=TRUE)[1,1] # Convert the area from square meters to square kilometers total_area_km2 &lt;- total_area_m2 / 1e6 # Print the final area cat(&quot;Total area of Island Blue range map:&quot;, round(total_area_km2, 2), &quot;km²\\n&quot;) ## Total area of Island Blue range map: 2799.03 km² 3.3 Full Loop This loop goes through each of the 17 species without published EOO data. For each species the total range area is calculated and compiled into a summary table. Results were then added to data/Master_list_SAR.csv # Set raster file locations and names for each species species_files &lt;- c( &quot;Island Blue&quot; = &quot;data/raster files/COSEWICID_651_1KM.tif&quot;, &quot;Purple Sanicle&quot; = &quot;data/raster files/COSEWICID_677_1KM.tif&quot;, &quot;Vancouver Island Beggarticks&quot; = &quot;data/raster files/COSEWICID_688_1KM.tif&quot;, &quot;Fernald&#39;s Milk-vetch&quot; = &quot;data/raster files/COSEWICID_4_1KM.tif&quot;, &quot;Engelmann&#39;s Quillwort&quot; = &quot;data/raster files/COSEWICID_178_1KM.tif&quot;, &quot;Gattinger&#39;s Agalinis&quot; = &quot;data/raster files/COSEWICID_180_1KM.tif&quot;, &quot;American Ginseng&quot; = &quot;data/raster files/COSEWICID_217_1KM.tif&quot;, &quot;Bashful Bulrush&quot; = &quot;data/raster files/COSEWICID_250_1KM.tif&quot;, &quot;Juniper Sedge&quot; = &quot;data/raster files/COSEWICID_575_1KM.tif&quot;, &quot;Barrens Willow&quot; = &quot;data/raster files/COSEWICID_678_1KM.tif&quot;, &quot;Loggerhead Shrike migrans subspecies&quot; = &quot;data/raster files/COSEWICID_26_1KM.tif&quot;, &quot;Scarlet Ammannia&quot; = &quot;data/raster files/COSEWICID_577_1KM.tif&quot;, &quot;Riddell&#39;s Goldenrod&quot; = &quot;data/raster files/COSEWICID_640_1KM.tif&quot;, &quot;American Badger jeffersonii subspecies (Eastern population)&quot; = &quot;data/raster files/COSEWICID_1230_1KM.tif&quot;, &quot;American Badger jeffersonii subspecies (Western population)&quot; = &quot;data/raster files/COSEWICID_1229_1KM.tif&quot;, &quot;Western Bumble Bee mckayi subspecies&quot; = &quot;data/raster files/COSEWICID_1256_1KM.tif&quot;, &quot;Western Bumble Bee occidentalis subspecies&quot; = &quot;data/raster files/COSEWICID_1267_1KM.tif&quot; ) # Create an empty data frame to store results results_df &lt;- data.frame(Species = character(), Total_Area_km2 = numeric(), stringsAsFactors = FALSE) # Loop over each species and calculate the total range area for(species in names(species_files)) { # Load species raster range_raster &lt;- rast(species_files[species]) # Calculate the cell area in square meters cell_areas &lt;- cellSize(range_raster) # Sum the area of all cells where raster is not NA # Calculates the total area of all valid cells by summing the individual areas total_area_m2 &lt;- global(cell_areas * !is.na(range_raster), &quot;sum&quot;, na.rm=TRUE)[1,1] # Convert the area from square meters to square kilometers total_area_km2 &lt;- total_area_m2 / 1e6 # Bind results to the summary table results_df &lt;- rbind(results_df, data.frame(Species = species, Total_Area_km2 = round(total_area_km2, 2), stringsAsFactors = FALSE)) } # Display the results in a table kable(results_df, caption = &quot;Range Area for Species Missing EOO (n=17)&quot;) (#tab:species_loop_SAR_Calculations)Range Area for Species Missing EOO (n=17) Species Total_Area_km2 Island Blue 2799.03 Purple Sanicle 664.01 Vancouver Island Beggarticks 1287.01 Fernald’s Milk-vetch 118.00 Engelmann’s Quillwort 258.00 Gattinger’s Agalinis 795.01 American Ginseng 115452.09 Bashful Bulrush 180.00 Juniper Sedge 185.00 Barrens Willow 562.00 Loggerhead Shrike migrans subspecies 19976.19 Scarlet Ammannia 475.00 Riddell’s Goldenrod 2479.02 American Badger jeffersonii subspecies (Eastern population) 11711.11 American Badger jeffersonii subspecies (Western population) 155655.47 Western Bumble Bee mckayi subspecies 634144.34 Western Bumble Bee occidentalis subspecies 772365.23 3.4 Outputs All SAR now have EOOs or EOO equivalents, and are prepared for binning and score calculations. "],["score-calculations-sar.html", "4 Score Calculations: SAR 4.1 Overview 4.2 Calculate SAR Scores 4.3 Export Data (.csv) 4.4 Outputs", " 4 Score Calculations: SAR 4.1 Overview The scoring process for SAR involved two steps: Binning EOO values into predefined categories Calculating species‑level scores using the formula outlined below: \\[ \\text{Score} = \\left(\\frac{1,000,000,000}{\\text{Number of SAR}}\\right) \\times \\left(\\frac{\\text{Project area (km}^2)}{\\text{Binned EOO}}\\right) \\] Where: Number of SAR: 838 (at the time of project start) Project area: 100 km² (10 km × 10 km grid cell) Binned EOO: species-specific value based on EOO binning Inputs data/Master_list_SAR.csv 4.1.1 Load Libraries library(dplyr) 4.2 Calculate SAR Scores # Read in master SAR list # Master SAR list contains SAR, EOOs, Binned EOOs, Taxon, SAR Status, Range Map ID, and more Master_list &lt;- read.csv(&quot;data/Master_list_SAR.csv&quot;) # Set bins and bin EOOs SARrange &lt;- Master_list %&gt;% mutate(EOO_binned = as.numeric(as.character(cut(EOO, breaks = c(-1, 5000, 20000, 130000, 100000000), right = FALSE, labels = c(2500, 12500, 75000, 130000))))) # Calculate scores using binned EOOs # Number of SAR at time of project was 838 # Project size was set to 100km2 to match grid cell size SARrangeScore &lt;- SARrange %&gt;% mutate(Score = (1e9 / 838) * (100 / EOO_binned)) 4.3 Export Data (.csv) # Write .csv file with scores write.csv(SARrangeScore, &quot;outputs/SAR_Scores.csv&quot;) 4.4 Outputs outputs/SAR_Scores.csv "],["create-grid-10-km-x-10-km.html", "5 Create Grid (10 km x 10 km) 5.1 Overview 5.2 Create Grid 5.3 Visualize Grid: New Brunswick Example 5.4 Export Grid 5.5 Outputs", " 5 Create Grid (10 km x 10 km) 5.1 Overview This section creates a 10 km × 10 km grid for mapping SAR scores across Canada. The grid is aligned to the Albers equal-area projection used by NCC in their AOH range maps. 5.1.1 Load Libraries library(sf) library(dplyr) library(tidyverse) library(rnaturalearth) library(units) library(readr) 5.2 Create Grid 5.2.1 Load Map of Canada # Map of Canada from rnaturalearth for clipping grid to Canada extent Canada_map &lt;- ne_states(country = &quot;Canada&quot;, returnclass = &quot;sf&quot;) %&gt;% st_make_valid() %&gt;% summarize() %&gt;% st_transform(crs = &quot;+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs&quot;) #Canada Albers 5.2.2 Create Grid Functions # Function to create a grid for an sf object (function adapted from Steffi LaZarte) make_grid &lt;- function(sf, size) { sf %&gt;% sf::st_bbox() %&gt;% wk::as_rct() %&gt;% wk::grd(dx = size, dy = size) %&gt;% sf::st_as_sf() } # Function to filter grid based on overlap (function adapted from Steffi LaZarte) grid_filter &lt;- function(grid, sf, size) { sf::st_filter(grid, sf) %&gt;% dplyr::mutate(id = 1:dplyr::n()) %&gt;% split(.$id) %&gt;% purrr::map(~ make_grid(.x, size)) } 5.2.3 Create Grids # Set units to km2 (project size is 100km2) as_units(10^2, &quot;km2&quot;) # Create 20 km x 20 km grid and then divide into 10 km x 10 km grid cells grid_20 &lt;- Canada_map %&gt;% make_grid(size = 20 * 1000) %&gt;% mutate(grid_id = 1:n()) grid_10 &lt;- grid_filter(grid_20, Canada_map, size = 10 * 1000) %&gt;% # 10km in meters bind_rows() %&gt;% mutate(grid_id = 1:n()) 5.2.4 Clip Grid to Canada # Clip 10 km grid to boundaries of Canada grid_10 &lt;- st_intersection(grid_10, Canada_map) 5.3 Visualize Grid: New Brunswick Example A zoomed-in plot of New Brunswick is included below to visualize the 10 x 10 km grid overlay. plot(NB) 5.4 Export Grid The grid was saved in multiple formats: - RDS file (.rds) for loading within R workflows. - Shapefile (.shp) for compatibility with GIS software. write_rds(grid_10, &quot;outputs/grid/grid_10km_Albers.rds&quot;) st_write( grid_10, &quot;outputs/grid/grid_10km_Albers.shp&quot;, delete_layer = TRUE ) 5.5 Outputs outputs/grid/grid_10km_Albers.rds outputs/grid/grid_10km_Albers.shp "],["loop-code.html", "6 Loop Code 6.1 Overview 6.2 Copy Species Raster Files (Optional) 6.3 Sample Loop 6.4 Sample Plot 6.5 Summing Scores per Grid Cell 6.6 Save Data 6.7 Outputs", " 6 Loop Code 6.1 Overview This section outlines the processing of 441 species range maps to extract presence/absence data across a 10 km x 10 km grid. For each raster: The species range is overlaid with the grid. Grid cells overlapping the species range are marked as present (1) or absent (0). In grids where a species is present, 1s are replaced with the species-specific score. Due to runtime constraints (approximately 10 hours for full processing), a subset of 2 species is demonstrated below for illustrative purposes. Full data and code are available separately. Inputs data/Master_list_SAR.csv outputs/grid/grid_10km_Albers.rds outputs/SAR_Scores.csv Species raster files from data/raster files outputs/output_grid_sf.rds: full loop output containing presence and score columns for all species (only a 2‑species subset is run in the example code, but this complete file is used for later analyses) 6.1.1 Load Libraries library(terra) library(sf) library(exactextractr) library(dplyr) library(rnaturalearth) library(ggplot2) 6.2 Copy Species Raster Files (Optional) All species raster files listed in the master CSV are filtered and copied to a new folder for processing. 6.2.1 Assign Folders # Set file paths csv_path &lt;- &quot;data/Master_list_SAR.csv&quot; source_folder &lt;- &quot;data/raster files/&quot; destination_folder &lt;- &quot;data/filtered raster files/&quot; 6.2.2 Copy Files All species raster files listed in the master CSV are filtered and copied to a new folder for processing. # Read master species list raster_files &lt;- read.csv(csv_path, stringsAsFactors = FALSE) # Get unique raster file names file_names &lt;- unique(na.omit(raster_files$File_name)) # Copy matching raster files for (file_name in file_names) { source_file &lt;- file.path(source_folder, file_name) dest_file &lt;- file.path(destination_folder, file_name) if (!file.exists(dest_file) &amp;&amp; file.exists(source_file)) { file.copy(from = source_file, to = dest_file, overwrite = FALSE) } } 6.3 Sample Loop The following code demonstrates the presence/absence extraction process for a sample of 2 species (from a total of 441). The loop performs the following steps: Identifies the corresponding species metadata. Processes the raster to identify grid cells with species presence. Overlays them on the spatial grid, creating two new columns for each species: presence_&lt;species_name&gt;: binary indicator (1 = presence, 0 = absence). value_&lt;species_name&gt;: species score assigned to occupied cells. Output is saved after each iteration to preserve progress in case of interruptions. # Load spatial grid and species scores grid_sf &lt;- readRDS(&quot;outputs/grid/grid_10km_Albers.rds&quot;) species_info &lt;- read.csv(&quot;outputs/SAR_Scores.csv&quot;) # List raster files to be processed raster_files &lt;- list.files(&quot;data/filtered raster files/&quot;, pattern = &quot;*.tif&quot;, full.names = TRUE) # Process a subset of 2 species (Eastern Hog-nosed Snake and Wood Turtle) target_files &lt;- c(&quot;COSEWICID_301_1KM.tif&quot;, &quot;COSEWICID_286_1KM.tif&quot;) subset_raster_files &lt;- raster_files[basename(raster_files) %in% target_files] # Output file path output_file_path &lt;- &quot;outputs/output_grid_sf_sample.rds&quot; # Loop through species for (i in seq_along(subset_raster_files)) { tryCatch({ raster_file_name &lt;- basename(subset_raster_files[i]) # Match raster file with species metadata species_info_row &lt;- species_info[species_info$File_name == raster_file_name, ] if (nrow(species_info_row) == 0) { stop(paste(&quot;No species info found for file&quot;, raster_file_name)) } # Load and reproject grid to raster CRS r &lt;- rast(subset_raster_files[i]) grid_sf &lt;- st_transform(grid_sf, crs = crs(r)) # Extract presence/absence using exactextractr presence &lt;- exact_extract(r, grid_sf, fun = function(values, coverage_fraction) { as.integer(any(!is.na(values))) }) # Clean species name for column naming clean_species_name &lt;- gsub(&quot;[^[:alnum:]_]&quot;, &quot;_&quot;, species_info_row$Common_name) # Attach presence and score columns to grid grid_sf[[paste0(&quot;presence_&quot;, clean_species_name)]] &lt;- presence grid_sf[[paste0(&quot;value_&quot;, clean_species_name)]] &lt;- ifelse(presence == 1, species_info_row$Score, 0) # Save updated grid after each iteration (keep progress if loop fails) saveRDS(grid_sf, file = output_file_path) # Optional messages as loop progresses print(paste(&quot;Done iteration&quot;, i, &quot;out of&quot;, length(subset_raster_files), &quot;at&quot;, Sys.time())) }, error = function(e) { print(paste(&quot;Error in iteration&quot;, i, &quot;:&quot;, e$message)) }) } 6.4 Sample Plot The map below visualizes the presence of Wood Turtle and Eastern Hog-nosed Snake from the above loop. 6.5 Summing Scores per Grid Cell After looping through all species, total scores per grid cell are calculated. 6.5.1 Load Necessary Files The full dataset resulting from the processing of all species is loaded here, extending beyond the two-species example demonstrated previously. # Load in output grid from above loop summed_scores &lt;- readRDS(&quot;outputs/output_grid_sf.rds&quot;) 6.5.2 Prepare Data # Drop geometry grid_10_attributes &lt;- st_drop_geometry(summed_scores) # Select only value columns (columns with scores) value_columns &lt;- grep(&quot;value&quot;, colnames(grid_10_attributes), value = TRUE) # Ensure those columns are numeric grid_10_attributes[, value_columns] &lt;- lapply(grid_10_attributes[, value_columns], function(x) { as.numeric(as.character(x)) }) 6.5.3 Sum Data # Calculate row sums summed_scores$sum_values &lt;- rowSums(grid_10_attributes[, value_columns], na.rm = TRUE) # Replace 0s with NA so they plot as grey summed_scores$sum_values[summed_scores$sum_values == 0] &lt;- NA 6.5.4 Example Summed Scores Table (#tab:sample_table_loop_SAR)Example Dataset of Summed Scores grid_id value_Eastern_Hog_nosed_Snake value_Wood_Turtle value_sum 88012 1591.09 917.9365 2509.0264 88013 1591.09 917.9365 2509.0264 88014 1591.09 917.9365 2509.0264 77204 0.00 917.9365 917.9365 77205 0.00 917.9365 917.9365 6.6 Save Data saveRDS(summed_scores, &quot;outputs/output_grid_sf_score.rds&quot;) 6.7 Outputs The following files are produced from this process: outputs/output_grid_sf.rds: Contains all 441 species processed, with individual presence_ and value_ columns for each species. This file serves as an intermediate output prior to the subsequent summarization of scores. outputs/output_grid_sf_score.rds: Same as above, with the addition of a sum_values column representing the total score across all species per grid cell. "],["mapping-static-and-interactive.html", "7 Mapping: Static and Interactive 7.1 Overview: Static Maps 7.2 Prepare and Clean Data 7.3 Map: All Species (100 km²) 7.4 Map: All Species (1 km²) 7.5 Maps: Taxon-Specific (1 km²) 7.6 Outputs: Static Maps 7.7 Interactive Maps Overview 7.8 Interactive Map: All Species 7.9 Interactive Map: Taxon Toggles 7.10 Outputs", " 7 Mapping: Static and Interactive 7.1 Overview: Static Maps This section generates static maps of SAR bioindicator scores across Canada on a 10 × 10 km (100 km²) grid. Original scores were computed per 100 km²; for these maps, they are rescaled to represent scores per 1 km². All maps use log10-transformed scores to enhance contrast. Legends display original (non-log) values for readability. Maps are produced for all SAR combined and for each major taxonomic group. Inputs outputs/output_grid_sf_score.rds: Spatial data with SAR scores data/Master_list_SAR.csv: Taxonomic classification of SAR 7.1.1 Load Libraries library(terra) library(sf) library(exactextractr) library(dplyr) library(rnaturalearth) library(ggplot2) 7.2 Prepare and Clean Data 7.2.1 Read in File ## Load in grid scores and master data combined &lt;- readRDS(&quot;data/output_grid_sf_score.rds&quot;) species_master &lt;- read.csv(&quot;data/Master_list_SAR.csv&quot;) 7.2.2 Clean Data: Remove Eskimo Curlew Remove the Eskimo Curlew from analysis. It is retained in the dataset for archival purposes. # Optional to start - remove Eskimo Curlew species_to_remove &lt;- &quot;Eskimo_Curlew&quot; # Find matching columns value_col_to_remove &lt;- grep(paste0(&quot;^value_&quot;, species_to_remove), names(combined), value = TRUE) presence_col_to_remove &lt;- grep(paste0(&quot;^presence_&quot;, species_to_remove), names(combined), value = TRUE) # Subtract the value column from sum_values combined$sum_values &lt;- combined$sum_values - combined[[value_col_to_remove]] # Remove the columns combined &lt;- combined %&gt;% select(-all_of(c(value_col_to_remove, presence_col_to_remove))) 7.3 Map: All Species (100 km²) 7.3.1 Prepare Data and Log Scores # Load grid and start here if not removing Eskimo Curlew # Provincial boundaries and reproject to match grid provinces &lt;- ne_states(country = &quot;Canada&quot;, returnclass = &quot;sf&quot;) provinces &lt;- st_transform(provinces, st_crs(combined)) # Log10 transform for plotting combined$log_sum_values &lt;- log10(combined$sum_values) # Define legend breaks based on data range score_breaks &lt;- c(1000, 10000, 100000, 1000000) range_vals &lt;- range(combined$sum_values[combined$sum_values &gt; 0], na.rm = TRUE) score_breaks &lt;- score_breaks[score_breaks &gt;= range_vals[1] &amp; score_breaks &lt;= range_vals[2]] log_breaks &lt;- log10(score_breaks) # Function to pad legend labels for alignment pad_labels_right &lt;- function(labels, width = 7) { sapply(labels, function(x) { label_text &lt;- formatC(x, format = &quot;f&quot;, big.mark = &quot;,&quot;, digits = 0) n &lt;- width - nchar(label_text) n &lt;- ifelse(n &lt; 0, 0, n) # no negative repeats paste0(strrep(&quot;\\u00A0&quot;, n), label_text) }) } 7.3.2 Plot at 100km² # Plot log-scored data with original score legend (100km²) ggplot(data = combined) + geom_sf(aes(fill = log_sum_values), color = NA) + geom_sf(data = provinces, fill = NA, color = &quot;black&quot;, size = 0.1) + scale_fill_gradientn( colours = c(&quot;#fff9db&quot;, &quot;#fee485&quot;, &quot;#fca944&quot;, &quot;#ed4801&quot;, &quot;#860a03&quot;, &quot;#221c05&quot;), breaks = log_breaks, labels = pad_labels_right(format(score_breaks, big.mark = &quot;,&quot;, scientific = FALSE)), na.value = &quot;grey&quot;, guide = guide_colorbar( label.position = &quot;right&quot;, label.hjust = 0 ) )+ theme_minimal() + labs( title = &quot;Bioindicator Scores (n=441)&quot;, fill = &quot;Score per 100 km²&quot; ) + theme( legend.position = c(0.9, 0.7), legend.title = element_text(size = 12), legend.text = element_text(size = 10), ) 7.4 Map: All Species (1 km²) Scores scaled to 1 km². # Per 1km2 combined$sum_values_scaled &lt;- combined$sum_values / 100 combined$log_sum_values_scaled &lt;- log10(combined$sum_values_scaled) # Adjust breaks for scaled data score_breaks_scaled &lt;- score_breaks / 100 # Filter breaks within the scaled data range range_vals_scaled &lt;- range(combined$sum_values_scaled[combined$sum_values_scaled &gt; 0], na.rm = TRUE) score_breaks_scaled &lt;- score_breaks_scaled[score_breaks_scaled &gt;= range_vals_scaled[1] &amp; score_breaks_scaled &lt;= range_vals_scaled[2]] log_breaks_scaled &lt;- log10(score_breaks_scaled) # Plot 1 km² scores ggplot(data = combined) + geom_sf(aes(fill = log_sum_values_scaled), color = NA) + geom_sf(data = provinces, fill = NA, color = &quot;black&quot;, size = 0.1) + scale_fill_gradientn( colours = c(&quot;#fff9db&quot;, &quot;#fee485&quot;, &quot;#fca944&quot;, &quot;#ed4801&quot;, &quot;#860a03&quot;, &quot;#221c05&quot;), breaks = log_breaks_scaled, labels = pad_labels_right(format(score_breaks_scaled, big.mark = &quot;,&quot;, scientific = FALSE)), na.value = &quot;grey&quot;, guide = guide_colorbar( label.position = &quot;right&quot;, label.hjust = 0 ) ) + theme_minimal() + labs( title = &quot;Bioindicator Scores (n=441)&quot;, fill = &quot;Score per 1 km²&quot; ) + theme( legend.position = c(0.9, 0.7), legend.title = element_text(size = 12), legend.text = element_text(size = 10), ) 7.5 Maps: Taxon-Specific (1 km²) The following section generates maps by taxonomic group. The breaks and legends are specific to each taxon. Individual taxa include: Birds Vascular Plants Amphibians Reptiles Mammals Arthropods Lichens Mosses Molluscs 7.5.1 Birds: Full Code and Map ## Taxon Maps # Load grid combined &lt;- readRDS(&quot;data/output_grid_sf_score.rds&quot;) # Prepare column keys species_columns &lt;- grep(&quot;^presence_&quot;, names(combined), value = TRUE) column_key &lt;- gsub(&quot;^presence_&quot;, &quot;&quot;, species_columns) # Clean species names in master species_master &lt;- species_master %&gt;% mutate(column_key = gsub(&quot;[-,./&#39;() ]&quot;, &quot;_&quot;, Common_name)) # Filter for birds in master list bird_keys &lt;- species_master %&gt;% filter(Taxon == &quot;Birds&quot;) %&gt;% pull(column_key) # Corresponding value columns for birds bird_value_cols &lt;- paste0(&quot;value_&quot;, bird_keys) bird_value_cols &lt;- bird_value_cols[bird_value_cols %in% names(combined)] # Remove Eskimo Curlew bird_value_cols &lt;- bird_value_cols[bird_value_cols != &quot;value_Eskimo_Curlew&quot;] # Create bird score (raw and log10-transformed) bird_grid &lt;- combined %&gt;% mutate(bird_score = rowSums(across(all_of(bird_value_cols)), na.rm = TRUE) / 100) %&gt;% mutate( bird_score = ifelse(bird_score == 0, NA, bird_score), log_bird_score = log10(bird_score) ) # Set custom breaks for the legend score_breaks &lt;- c(10, 100, 1000) log_breaks &lt;- log10(score_breaks) # Custom label padding pad_labels_right &lt;- function(labels, width = 5) { sapply(labels, function(x) { label_text &lt;- formatC(x, format = &quot;f&quot;, big.mark = &quot;,&quot;, digits = 0) n &lt;- width - nchar(label_text) n &lt;- ifelse(n &lt; 0, 0, n) paste0(strrep(&quot;\\u00A0&quot;, n), label_text) }) } # Province outline provinces &lt;- ne_states(country = &quot;Canada&quot;, returnclass = &quot;sf&quot;) %&gt;% st_transform(st_crs(combined)) # Plot bird map with log scale ggplot(data = bird_grid) + geom_sf(aes(fill = log_bird_score), color = NA) + geom_sf(data = provinces, fill = NA, color = &quot;black&quot;, size = 0.1) + scale_fill_gradientn( colours = c(&quot;#fff9db&quot;, &quot;#fee485&quot;, &quot;#fca944&quot;, &quot;#ed4801&quot;, &quot;#860a03&quot;, &quot;#221c05&quot;), breaks = log_breaks, labels = pad_labels_right(score_breaks), na.value = &quot;grey&quot;, guide = guide_colorbar( label.position = &quot;right&quot;, label.hjust = 0 ) ) + theme_minimal() + labs( title = &quot;Bioindicator Scores: Birds (n=79)&quot;, fill = &quot;Score per 1 km²&quot; ) + theme( legend.position = c(0.9, 0.7), legend.title = element_text(size = 12), legend.text = element_text(size = 10) ) 7.5.2 Other Taxa: Maps Following the same workflow as the Bird example, static maps were generated for all remaining taxa. Each map shows log₁₀-scaled bioindicator scores per 1km². 7.6 Outputs: Static Maps The following 11 static maps are generated: Static_Map_Amphibians_1km_Log.pdf Static_Map_Arthropods_1km_Log.pdf Static_Map_Birds_1km_Log.pdf Static_Map_Lichens_1km_Log.pdf Static_Map_Mammals_1km_Log.pdf Static_Map_Molluscs_1km_Log.pdf Static_Map_Mosses_1km_Log.pdf Static_Map_Plants_1km_Log.pdf Static_Map_Reptiles_1km_Log.pdf Static_Map_SAR_1km2.pdf Static_Map_SAR_100km2.pdf 7.7 Interactive Maps Overview This section outlines the creation of interactive maps displaying the distribution of SAR bioindicator scores across Canada. The grid resolution is 10 km x 10 km (100 km²). All scores are calculated over 100 km² grid cells and have been scaled to 1 km². Note: The interactive Leaflet maps are too large to render directly in this RMarkdown document. They are available for viewing and download on GitHub. 7.7.1 Input Files output_grid_sf_score.rds: Spatial data with SAR scores Master_list_SAR.csv: Taxonomic classification of SAR 7.8 Interactive Map: All Species 7.8.1 Load Libraries library(leaflet) library(dplyr) library(sf) library(htmlwidgets) 7.8.2 Read in Files ## Load in grid scores and master data combined &lt;- readRDS(&quot;data/output_grid_sf_score.rds&quot;) species_master &lt;- read.csv(&quot;data/Master_list_SAR.csv&quot;) 7.8.3 Data Preparation # Reproject to lat/long for leaflet combined &lt;- st_transform(combined, crs = 4326) # Get list of all species we have data for species_columns &lt;- grep(&quot;^presence_&quot;, names(combined), value = TRUE) ## When presence/absence was extracted, all spaces and characters were replaced with &#39;_&#39; ## To display names without underscores we have to create a dataframe that has the names we want ## displayed along with what the names currently are (i.e. Piping Plover from Piping_Plover) # Create a list with these species (remove presence_ from the front) column_key &lt;- gsub(&quot;^presence_&quot;, &quot;&quot;, species_columns) # Replace all spaces to mimic current naming convention species_master &lt;- species_master %&gt;% mutate(column_key = gsub(&quot;[-,./&#39;() ]&quot;, &quot;_&quot;, Common_name)) species_master_filtered &lt;- species_master %&gt;% filter(column_key %in% column_key) lookup_table &lt;- setNames( paste0( species_master_filtered$Common_name, &quot; (&lt;b&gt;&quot;, species_master_filtered$SAR_status, &quot;&lt;/b&gt;)&quot; ), species_master_filtered$column_key ) # Convert all presence_ columns to logical (TRUE/FALSE) combined &lt;- combined %&gt;% mutate(across(all_of(species_columns), ~ as.logical(.))) # Initialize map leaflet_map &lt;- leaflet() %&gt;% addProviderTiles(providers$CartoDB.Positron) # List of taxa to include (limit for performance) taxon_types &lt;- c(&quot;Mammals&quot;, &quot;Birds&quot;, &quot;Reptiles&quot;, &quot;Amphibians&quot;, &quot;Vascular Plants&quot;) # Add &quot;All Species&quot; layer grid_all_species &lt;- combined %&gt;% mutate(score = rowSums(across(starts_with(&quot;value_&quot;)), na.rm = TRUE) / 100) %&gt;% filter(score &gt; 0) # Drop empty cells # Create popup info for All Species layer grid_all_species &lt;- grid_all_species %&gt;% rowwise() %&gt;% mutate(popup_info = { species_names &lt;- c() for (species_column in species_columns) { raw_name &lt;- gsub(&quot;^presence_&quot;, &quot;&quot;, species_column) if (!is.null(get(species_column)) &amp;&amp; get(species_column) &amp;&amp; raw_name %in% names(lookup_table)) { species_names &lt;- c(species_names, lookup_table[raw_name]) } } species_html &lt;- if (length(species_names) == 0) { &quot;No species present&quot; } else { paste(species_names, collapse = &quot;&lt;br&gt;&quot;) } paste0( &quot;&lt;b&gt;All Species Score (per km²):&lt;/b&gt; &quot;, round(score, 2), &quot;&lt;br&gt;&lt;br&gt;&quot;, &quot;&lt;b&gt;Species Present:&lt;/b&gt;&lt;br&gt;&quot;, species_html ) }) %&gt;% ungroup() # Color palette for All Species pal_all_species &lt;- colorNumeric( palette = c(&quot;#fee485&quot;, &quot;#ed4801&quot;, &quot;#860a03&quot;, &quot;#221c05&quot;), domain = range(grid_all_species$score, na.rm = TRUE), na.color = &quot;grey&quot; ) 7.8.4 Create Leaflet # Add the All Species layer leaflet_map &lt;- leaflet_map %&gt;% addPolygons( data = grid_all_species, fillColor = ~pal_all_species(score), weight = 0.5, color = &quot;lightgrey&quot;, fillOpacity = 0.7, popup = ~popup_info, group = &quot;All Species&quot; ) 7.8.5 Save Leaflet as .html # Save file file_path &lt;- &quot;outputs/interactive_map_all.html&quot; saveWidget(leaflet_map, file = file_path, selfcontained = TRUE) 7.9 Interactive Map: Taxon Toggles This leaflet has toggles for the varying taxa that can be turned off and on. Important Note: When toggling on layers, the top layer takes priority. Toggled on maps can not be combined, it is purely for comparison sake. 7.9.1 Define Taxa of Interest To improve performance, only the most common taxa of interest are shown on these maps. Including all taxa would make the map too slow and difficult to use. taxon_types &lt;- c(&quot;Mammals&quot;, &quot;Birds&quot;, &quot;Reptiles&quot;, &quot;Amphibians&quot;, &quot;Vascular Plants&quot;) 7.9.2 Loop Through Taxa for (taxon in taxon_types) { taxon_keys &lt;- species_master %&gt;% filter(Taxon == taxon) %&gt;% pull(column_key) taxon_presence_cols &lt;- paste0(&quot;presence_&quot;, taxon_keys) taxon_value_cols &lt;- paste0(&quot;value_&quot;, taxon_keys) # Score for this taxon grid_taxon &lt;- combined %&gt;% mutate(score = rowSums(across(all_of(taxon_value_cols)), na.rm = TRUE) / 100) %&gt;% filter(score &gt; 0) # Drop empty cells # Popups grid_taxon &lt;- grid_taxon %&gt;% rowwise() %&gt;% mutate( popup_info = { species_names &lt;- c() for (species_column in taxon_presence_cols) { raw_name &lt;- gsub(&quot;^presence_&quot;, &quot;&quot;, species_column) if (!is.null(get(species_column)) &amp;&amp; get(species_column) &amp;&amp; raw_name %in% names(lookup_table)) { species_names &lt;- c(species_names, lookup_table[raw_name]) } } species_html &lt;- if (length(species_names) == 0) { &quot;No species present&quot; } else { paste(species_names, collapse = &quot;&lt;br&gt;&quot;) } paste0( &quot;&lt;b&gt;&quot;, taxon, &quot; Score (per km²):&lt;/b&gt; &quot;, round(score, 2), &quot;&lt;br&gt;&lt;br&gt;&quot;, &quot;&lt;b&gt;Species Present:&lt;/b&gt;&lt;br&gt;&quot;, species_html ) } ) %&gt;% ungroup() # Color palette for this taxon pal_taxon &lt;- colorNumeric( palette = c(&quot;#fee485&quot;, &quot;#ed4801&quot;, &quot;#860a03&quot;, &quot;#221c05&quot;), domain = range(grid_taxon$score, na.rm = TRUE), na.color = &quot;grey&quot; ) # Add to map leaflet_map &lt;- leaflet_map %&gt;% addPolygons( data = grid_taxon, fillColor = ~pal_taxon(score), weight = 0.5, color = &quot;lightgrey&quot;, fillOpacity = 0.7, popup = ~popup_info, group = taxon ) } 7.9.3 Layer Options # Turn all layers off initially leaflet_map &lt;- leaflet_map %&gt;% hideGroup(&quot;All Species&quot;) %&gt;% hideGroup(taxon_types) %&gt;% addLayersControl( overlayGroups = c(&quot;All Species&quot;, taxon_types), options = layersControlOptions(collapsed = FALSE) ) 7.9.4 Save saveWidget(leaflet_map, file = &quot;outputs/interactive_map_all_with_taxa.html&quot;, selfcontained = TRUE) 7.10 Outputs The following interactive maps are generated: interactive_map_all_with_taxa.html:Contains toggleable layers for All Species and each key taxon (Mammals, Birds, Reptiles, Amphibians, Vascular Plants). This is a larger file and may take longer to render. interactive_map_all.html: Displays the All Species Score per km² map with clickable popups showing the score and species present. This is a lighter map suitable for quick loading. "],["score-calculations-ecotypes.html", "8 Score Calculations: Ecotypes 8.1 Overview 8.2 Calculate Ecozone Scores 8.3 Export Data (.csv) 8.4 Outputs", " 8 Score Calculations: Ecotypes 8.1 Overview The calculation of ecotype scores involved a single step of area-based rarity scoring. Scores were calculated across all ecozones, with each ecotype occurrence within each ecozone treated independently. For example, wetlands in the Northern Arctic ecozone and wetlands in the Prairie ecozone each received separate scores based solely on their area within that ecozone. This approach resulted in 145 unique ecotype‑ecozone scores. Scores were calculated using the following formula: \\[ \\text{Score} = \\left(\\frac{1,\\!000,\\!000,\\!000}{n}\\right) \\times \\left(\\frac{\\text{Project Area (km}^2)}{\\text{Area of Ecotype in Ecozone (km}^2)}\\right) \\] Where: Project Area: 1 km². \\(n\\): 145 (number of unique ecotype-ecozone scores) Area of Ecotype in Ecozone: ecotype-specific scores based on area Inputs data/Land cover type by ecozone with names 2025-02 - cleaned.csv: Ecozone and ecotype metadata 8.1.1 Load Libraries library(dplyr) library(readr) library(knitr) 8.2 Calculate Ecozone Scores # Load in metadata ecozone_data &lt;- read.csv(&quot;data/Land cover type by ecozone with names 2025-02 - cleaned.csv&quot;) # Filter to remove snow and ice ecozone_data &lt;- ecozone_data %&gt;% filter(Class != &quot;Snow and Ice&quot;) # Set the scaling factor and n value n &lt;- 145 scaling_factor &lt;- 1000000000 / n # Clean data and calculate scores ecotype_scores &lt;- ecozone_data %&gt;% filter(!is.na(`Area..km2.`), `Area..km2.` &gt; 0) %&gt;% mutate( Ecotype = Class, Ecozone = Ecozone.name, RawScore = 1 / `Area..km2.`, Score = scaling_factor * RawScore ) %&gt;% select(Ecozone, Ecotype, `Area..km2.`, Score) # Preview result knitr::kable(head(ecotype_scores, 10), digits = 2, caption = &quot;Sample of Ecotype Scores&quot;) (#tab:calculation_ecotype_scores)Sample of Ecotype Scores Ecozone Ecotype Area..km2. Score Arctic Cordillera Intertidal 415.13 16612.83 Arctic Cordillera Temperate or sub-polar needleleaf forest 238.93 28864.64 Arctic Cordillera Sub-polar or polar shrubland-lichen-moss 2059.27 3349.02 Arctic Cordillera Sub-polar or polar grassland-lichen-moss 33220.22 207.60 Arctic Cordillera Sub-polar or polar barren-lichen-moss 26261.36 262.61 Arctic Cordillera Barren lands 45740.65 150.78 Arctic Cordillera Water 12668.54 544.38 Northern Arctic Intertidal 10797.60 638.71 Northern Arctic Temperate or sub-polar needleleaf forest 216.63 31834.97 Northern Arctic Sub-polar taiga needleleaf forest 344.19 20036.76 8.3 Export Data (.csv) write_csv(ecotype_scores, &quot;outputs/Ecotype_Scores_Scaled_Final.csv&quot;) 8.4 Outputs Ecotype_Scores_Scaled_Final.csv "],["ecozone-and-ecotype-raster-generation.html", "9 Ecozone and Ecotype Raster Generation 9.1 Overview: Ecozone Loop 9.2 Ecozone Rasters 9.3 Outputs 9.4 Overview: Ecotype Loop 9.5 Ecotype Rasters 9.6 Outputs", " 9 Ecozone and Ecotype Raster Generation This document outlines the workflow to generate ecozone- and ecotype-specific raster layers representing ecotype scores across Canada. 9.1 Overview: Ecozone Loop The ecozone loop produces ecozone-specific raster layers where each 30m ecotype cell is reclassified to its unique score for that ecozone. The workflow involves: Masking the NALCMS 30m land cover raster to each ecozone boundary. Reclassifying each ecotype cell to its ecozone-specific score using the provided scores table. Inputs data/Ecozones/ecozones.shp: Ecozone shapefile data/can_land_cover_2020v2_30m_tif/CAN_NALCMS_landcover_2020v2_30m/data/CAN_NALCMS_landcover_2020v2_30m.tif: Ecotype raster from NALCMS outputs/Ecotype_Scores_Scaled_Final.csv: Ecotype scores (metadata) 9.1.1 Load Libraries library(terra) library(sf) library(dplyr) 9.2 Ecozone Rasters 9.2.1 Read Files and Prepare Data # Load ecozones shapefile and ecotypes raster ecozones &lt;- st_read(&quot;data/Ecozones/ecozones.shp&quot;) ecotypes &lt;- rast(&quot;data/can_land_cover_2020v2_30m_tif/CAN_NALCMS_landcover_2020v2_30m/data/CAN_NALCMS_landcover_2020v2_30m.tif&quot;) scores &lt;- read.csv(&quot;outputs/Ecotype_Scores_Scaled_Final.csv&quot;) # Reproject ecozones to match raster CRS ecozones &lt;- st_transform(ecozones, crs(ecotypes)) # Create habitat lookup table habitat_lookup &lt;- data.frame( value = 1:19, name = c( &quot;Temperate or sub-polar needleleaf forest&quot;, &quot;Sub-polar taiga needleleaf forest&quot;, &quot;Tropical or sub-tropical broadleaf evergreen forest&quot;, &quot;Tropical or sub-tropical broadleaf deciduous forest&quot;, &quot;Temperate or sub-polar broadleaf deciduous forest&quot;, &quot;Mixed Forest&quot;, &quot;Tropical or sub-tropical shrubland&quot;, &quot;Temperate or sub-polar shrubland&quot;, &quot;Tropical or sub-tropical grassland&quot;, &quot;Temperate or sub-polar grassland&quot;, &quot;Sub-polar or polar shrubland-lichen-moss&quot;, &quot;Sub-polar or polar grassland-lichen-moss&quot;, &quot;Sub-polar or polar barren-lichen-moss&quot;, &quot;Wetland&quot;, &quot;Cropland&quot;, &quot;Barren lands&quot;, &quot;Urban&quot;, &quot;Water&quot;, &quot;Snow and Ice&quot; ) ) # Get all unique ecozone names all_zones &lt;- unique(ecozones$ZONE_NAME) # Set the output directory output_dir &lt;- &quot;outputs/ecozone_rasters&quot; dir.create(output_dir, showWarnings = FALSE) 9.2.2 Ecozone Masking Loop This loop creates an independent raster for each ecozone, where each ecotype is reclassified to its respective score for that ecozone. ## Ecozone Loop for (zone in all_zones) { cat(&quot;Processing:&quot;, zone, &quot;\\n&quot;) try({ # Filter to current ecozone polygon zone_poly &lt;- ecozones %&gt;% filter(ZONE_NAME == zone) %&gt;% st_make_valid() if (nrow(zone_poly) == 0 || st_is_empty(zone_poly)) { cat(&quot;No geometry found for&quot;, zone, &quot;- skipping.\\n\\n&quot;) next } zone_vect &lt;- vect(zone_poly) # Crop and mask raster eco_crop &lt;- terra::crop(ecotypes, zone_vect) eco_masked &lt;- terra::mask(eco_crop, zone_vect) # Remove &quot;Snow and Ice&quot; (value 19) eco_masked[eco_masked == 19] &lt;- NA # Filter scores for current ecozone zone_scores &lt;- scores %&gt;% filter(Ecozone == zone) # Merge with the habitat lookup score_lookup &lt;- merge( habitat_lookup, zone_scores, by.x = &quot;name&quot;, by.y = &quot;Ecotype&quot;, all.x = TRUE ) score_lookup_clean &lt;- score_lookup[!is.na(score_lookup$Score), ] # If no valid scores, skip if (nrow(score_lookup_clean) == 0) { cat(&quot;⚠ No matching ecotype scores for&quot;, zone, &quot;- skipping.\\n\\n&quot;) next } # Reclassify to corresponding scores reclass_matrix &lt;- as.matrix(score_lookup_clean[, c(&quot;value&quot;, &quot;Score&quot;)]) score_raster &lt;- classify(eco_masked, rcl = reclass_matrix, others = NA) # Save as .rds rds_path &lt;- file.path(output_dir, paste0(gsub(&quot; &quot;, &quot;_&quot;, zone), &quot;_score_raster.rds&quot;)) saveRDS(score_raster, rds_path) # Save as .tif (GeoTIFF) tif_path &lt;- file.path(output_dir, paste0(gsub(&quot; &quot;, &quot;_&quot;, zone), &quot;_score_raster.tif&quot;)) writeRaster(score_raster, filename = tif_path, overwrite = TRUE) cat(&quot;✔ Finished:&quot;, zone, &quot;\\n\\n&quot;) }, silent = FALSE) } 9.3 Outputs This loop generates both an .rds file (for efficient R usage) and a .tif GeoTIFF file (for GIS applications) for each ecozone, resulting in 30 raster outputs. Files are stored in `outputs/ecozone_rasters Arctic_Cordillera_score_raster.rds and Arctic_Cordillera_score_raster.tif Atlantic_Maritime_score_raster.rds and Atlantic_Maritime_score_raster.tif Boreal_Cordillera_score_raster.rds and Boreal_Cordillera_score_raster.tif Boreal_Plain_score_raster.rds and Boreal_Plain_score_raster.tif Boreal_Shield_score_raster.rds and Boreal_Shield_score_raster.tif Hudson_Plain_score_raster.rds and Hudson_Plain_score_raster.tif Mixedwood_Plain_score_raster.rds and Mixedwood_Plain_score_raster.tif Montane_Cordillera_score_raster.rds and Montane_Cordillera_score_raster.tif Northern_Arctic_score_raster.rds and Northern_Arctic_score_raster.tif Pacific_Maritime_score_raster.rds and Pacific_Maritime_score_raster.tif Prairie_score_raster.rds and Prairie_score_raster.tif Southern_Arctic_score_raster.rds and Southern_Arctic_score_raster.tif Taiga_Cordillera_score_raster.rds and Taiga_Cordillera_score_raster.tif Taiga_Plain_score_raster.rds and Taiga_Plain_score_raster.tif Taiga_Shield_score_raster.rds and Taiga_Shield_score_raster.tif 9.4 Overview: Ecotype Loop The Ecotype Loop extracts key ecotypes across Canada and outputs separate rasters for each The workflow includes: Identify target ecotype scores from the CSV table. Reclassify all non-target scores to NA. Inputs outputs/ecozone_rasters/mosaic/Canada_Ecozone_Score_Mosaic_FIRST_15.tif: mosaicked national ecotype raster outputs/Ecotype_Scores_Scaled_Final.csv: ecotype metadata 9.4.1 Load Libraries library(terra) library(dplyr) 9.5 Ecotype Rasters 9.5.1 Data Preparation and File Loading # Load raster and scores table r &lt;- rast(&quot;outputs/ecozone_rasters/mosaic/Canada_Ecozone_Score_Mosaic_FIRST_15.tif&quot;) scores &lt;- read.csv(&quot;outputs/Ecotype_Scores_Scaled_Final.csv&quot;) # Output folder out_dir &lt;- &quot;outputs/Reclassified_By_Ecotype/&quot; # List of ecotypes to process ecotypes &lt;- c( &quot;Barren lands&quot;, &quot;Mixed Forest&quot;, &quot;Temperate or sub-polar grassland&quot;, &quot;Temperate or sub-polar broadleaf deciduous forest&quot;, &quot;Temperate or sub-polar needleleaf forest&quot;, &quot;Water&quot;, &quot;Wetland&quot; ) # Tolerance for matching scores tolerance &lt;- 0.001 9.5.2 Loop Through Ecotypes # Loop through ecotypes for (eco in ecotypes) { # Filter and extract target scores target_scores &lt;- unique(scores %&gt;% filter(Ecotype == eco) %&gt;% pull(Score)) # Skip if no matching scores if (length(target_scores) == 0) { warning(paste(&quot;No scores found for:&quot;, eco)) next } # Build reclass matrix reclass_matrix &lt;- do.call(rbind, lapply(target_scores, function(x) { c(x - tolerance, x + tolerance, x) })) # Reclassify r_reclassed &lt;- classify(r, rcl = reclass_matrix, others = NA) # Clean ecotype name for file output clean_name &lt;- gsub(&quot;[^a-zA-Z0-9]&quot;, &quot;_&quot;, eco) # Save as .tif writeRaster( r_reclassed, filename = file.path(out_dir, paste0(&quot;Reclassified_&quot;, clean_name, &quot;.tif&quot;)), overwrite = TRUE, wopt = list(datatype = &quot;FLT4S&quot;, gdal = c(&quot;COMPRESS=LZW&quot;, &quot;TILED=YES&quot;)) ) # Save as .rds saveRDS(r_reclassed, file = file.path(out_dir, paste0(&quot;Reclassified_&quot;, clean_name, &quot;.rds&quot;))) } 9.6 Outputs The Ecotype Loop generates two files per target ecotype: Reclassified_Barren_lands.rds and Reclassified_Barren_lands.tif Reclassified_Mixed_Forest.rds and Reclassified_Mixed_Forest.tif Reclassified_Temperate_or_sub_polar_grassland.rds and Reclassified_Temperate_or_sub_polar_grassland.tif Reclassified_Temperate_or_sub_polar_broadleaf_deciduous_forest.rds and Reclassified_Temperate_or_sub_polar_broadleaf_deciduous_forest.tif Reclassified_Temperate_or_sub_polar_needleleaf_forest.rds and Reclassified_Temperate_or_sub_polar_needleleaf_forest.tif Reclassified_Water.rds and Reclassified_Water.tif Reclassified_Wetland.rds and Reclassified_Wetland.tif "],["ecozone-mosaic.html", "10 Ecozone Mosaic 10.1 Overview 10.2 Mosaic Loop 10.3 Log Scores 10.4 Export Data (.csv) 10.5 Outputs", " 10 Ecozone Mosaic 10.1 Overview This section outlines the mosaicking of each ecozone raster to create a single nationwide map of ecotype scores. Each ecozone was processed independently to assign scores to its ecotypes, and then these individual rasters are mosaicked back together to produce the complete Canada-wide score raster. Inputs outputs/ecozone_rasters/: Folder containing all 15 ecozone rasters (*_score_raster.tif) 10.1.1 Load Libraries library(terra) 10.2 Mosaic Loop 10.2.1 Data Preparation # Set mosaic output directory tif_dir &lt;- &quot;outputs/ecozone_rasters/&quot; output_dir &lt;- &quot;outputs/ecozone_rasters/mosaic&quot; # List all *_score_raster.tif files tif_files &lt;- list.files(tif_dir, pattern = &quot;_score_raster\\\\.tif$&quot;, full.names = TRUE) # Sort for consistent ordering tif_files &lt;- sort(tif_files) # Create initial working mosaic with the first raster current_mosaic &lt;- file.path(output_dir, &quot;mosaic.tif&quot;) file.copy(tif_files[1], current_mosaic, overwrite = TRUE) ## [1] TRUE 10.2.2 Loop Through and Join Ecozones # Set mosaic output directory for (i in 2:length(tif_files)) { cat(&quot;Mosaicking&quot;, basename(tif_files[i]), &quot;...\\n&quot;) r_base &lt;- rast(current_mosaic) r_new &lt;- rast(tif_files[i]) temp_mosaic &lt;- file.path(output_dir, paste0(&quot;temp_mosaic_&quot;, i, &quot;.tif&quot;)) mosaic_r &lt;- mosaic(r_base, r_new, fun = &quot;first&quot;, filename = temp_mosaic, overwrite = TRUE, wopt = list(datatype = &quot;FLT4S&quot;, gdal = c(&quot;COMPRESS=LZW&quot;, &quot;TILED=YES&quot;))) # Update working mosaic file.copy(temp_mosaic, current_mosaic, overwrite = TRUE) file.remove(temp_mosaic) } # Save the final mosaic output_mosaic &lt;- file.path(output_dir, &quot;Canada_Ecozone_Score_Mosaic_ALL.tif&quot;) file.copy(current_mosaic, output_mosaic, overwrite = TRUE) cat(&quot;✅ Final mosaic complete. Saved to:\\n&quot;, output_mosaic, &quot;\\n&quot;) 10.3 Log Scores # Load the final raster if not already loaded final_path &lt;- &quot;outputs/ecozone_rasters/mosaic/Canada_Ecozone_Score_Mosaic_ALL.tif&quot; r_final &lt;- rast(final_path) # Set values &lt;= 0 to NA (log undefined for 0 or negative values) r_final[r_final &lt;= 0] &lt;- NA # Apply log10 transformation r_log &lt;- log10(r_final) # Plot plot(r_log, main = &quot;Log-Transformed Ecotype Raster&quot;) plot(r_mosaic, main = &quot;Original Ecotype Raster&quot;) 10.4 Export Data (.csv) saveRDS(r_log, &quot;outputs/ecozone_rasters/mosaic/Canada_Ecozone_Score_Mosaic_LOG10.rds&quot;) writeRaster( r_log, &quot;outputs/ecozone_rasters/mosaic/Canada_Ecozone_Score_Mosaic_LOG10.tif&quot;, overwrite = TRUE ) 10.5 Outputs outputs/ecozone_rasters/mosaic/Canada_Ecozone_Score_Mosaic_ALL.tif outputs/ecozone_rasters/mosaic/Canada_Ecozone_Score_Mosaic_LOG10.tif outputs/ecozone_rasters/mosaic/Canada_Ecozone_Score_Mosaic_LOG10.rds "],["mapping-ecotypes.html", "11 Mapping: Ecotypes 11.1 Overview 11.2 National Ecotype Map 11.3 Ecotype Mapping: Individual Ecotypes 11.4 Outputs", " 11 Mapping: Ecotypes 11.1 Overview This section visualizes ecotype scores using log-transformed rasters. Two types of ecotype maps are produced: National Map – Canada with all ecotypes and ecozones Ecotype Maps – Individual maps for each ecotype Inputs outputs/ecozone_rasters/mosaic/Canada_Ecozone_Score_Mosaic_LOG10.rds: Log-transformed raster mosaic of all ecotypes. data/Ecozones/ecozones.shp: Ecozone shapefile (vector outlines). outputs/Reclassified by Ecotype/Reclassified_By_Ecotype/: Individual ecotype rasters (log-transformed). outputs/Ecotype_Scores_Scaled_Final.csv: Reference scores used for generating legend labels. 11.1.1 Load Libraries library(terra) library(fields) library(rnaturalearth) library(sf) library(dplyr) 11.2 National Ecotype Map The following map shows log-transformed ecotype scores across Canada, scaled to a 1km² project area. Raster colors represent log₁₀ scores to increase contrast between scores. Legend labels are displayed in the original score scale for better readability. 11.2.1 Base Plot # Load raster log_raster &lt;- readRDS(&quot;outputs/ecozone_rasters/mosaic/Canada_Ecozone_Score_Mosaic_LOG10.rds&quot;) # Get log min and max log_range &lt;- minmax(log_raster) log_min &lt;- log_range[&quot;min&quot;, 1] log_max &lt;- log_range[&quot;max&quot;, 1] # Define custom color palette my_colors &lt;- c(&quot;#fff9db&quot;, &quot;#fee485&quot;, &quot;#fca944&quot;, &quot;#ed4801&quot;, &quot;#860a03&quot;, &quot;#221c05&quot;) custom_palette &lt;- colorRampPalette(my_colors)(100) # Set margins and plot par(oma = c(0, 0, 0, 4)) plot(log_raster, col = custom_palette, legend = FALSE, main = &quot;Ecotype Scores Canada&quot;) # Set breaks for legend label_ticks_orig &lt;- c(5, 50, 500, 5000, 50000) label_ticks_log &lt;- log10(label_ticks_orig) # Add legend with original scores image.plot(legend.only = TRUE, zlim = c(log_min, log_max), col = custom_palette, legend.width = 1.5, legend.shrink = 0.8, legend.mar =1, axis.args = list(at = label_ticks_log, labels = format(label_ticks_orig, big.mark = &quot;,&quot;), cex.axis = 0.9, las = 1), legend.args = list(text = &quot;Score&quot;, side = 3, font = 2, line = 1, adj = 0.1)) 11.2.2 Add Canada or Ecozone Outline Note: When using add = TRUE, layers are drawn on top of an existing plot. If you want to display just one overlay (e.g., the Canada outline) by itself, you must re-plot the base raster first, since add = TRUE does not create a new plot. # Add outline of Canada canada &lt;- ne_states(country = &quot;Canada&quot;, returnclass = &quot;sf&quot;) canada_transformed &lt;- st_transform(canada, crs(log_raster)) plot(log_raster, col = custom_palette, legend = FALSE, main = &quot;Ecotype Scores Canada&quot;) plot(st_geometry(canada_transformed), add = TRUE, border = &quot;grey30&quot;, lwd = 1) # Add legend with original scores rather than log scores image.plot(legend.only = TRUE, zlim = c(log_min, log_max), col = custom_palette, legend.width = 1.5, legend.shrink = 0.8, legend.mar =4, axis.args = list(at = label_ticks_log, labels = format(label_ticks_orig, big.mark = &quot;,&quot;), cex.axis = 0.9, las = 1), legend.args = list(text = &quot;Score&quot;, side = 3, font = 2, line = 1, adj = 0.1)) # Add ecozones outlines ecozones &lt;- st_read(&quot;data/Ecozones/ecozones.shp&quot;, quiet = TRUE) ecozones &lt;- st_transform(ecozones, crs(log_raster)) plot(log_raster, col = custom_palette, legend = FALSE, main = &quot;Ecotype Scores Canada&quot;) plot(ecozones$geometry, add = TRUE, border = &quot;grey30&quot;, lwd = 1) # Add legend with original scores rather than log scores image.plot(legend.only = TRUE, zlim = c(log_min, log_max), col = custom_palette, legend.width = 1.5, legend.shrink = 0.8, legend.mar =4, axis.args = list(at = label_ticks_log, labels = format(label_ticks_orig, big.mark = &quot;,&quot;), cex.axis = 0.9, las = 1), legend.args = list(text = &quot;Score&quot;, side = 3, font = 2, line = 1, adj = 0.1)) 11.3 Ecotype Mapping: Individual Ecotypes The code below generates seven individual ecotype maps. While not all ecotypes are shown, the workflow can be easily reproduced for any other ecotype as needed. Ecotypes included in this example: Barren Lands Temperate or Sub-polar Grasslands Temperate of Sub-polar Needleleaf Forest Mixed Forest Temperate of Sub-polar Broadleaf Deciduous Forest Water Wetland 11.3.1 Function for Pretty Breaks # Create function for nice breaks on legend generate_pretty_log_breaks &lt;- function(min_val, max_val, n = 5) { log_min &lt;- log10(min_val) log_max &lt;- log10(max_val) log_breaks &lt;- seq(log_min, log_max, length.out = n) # Convert back to original scale raw_breaks &lt;- 10^log_breaks # Round the breaks to &quot;nice&quot; numbers rounded_breaks &lt;- sapply(raw_breaks, function(x) { if (x &lt; 100) { round(x, -1) } else if (x &lt; 1000) { round(x, -2) } else if (x &lt; 10000) { round(x, -2) } else { round(x, -3) } }) rounded_breaks &lt;- sort(unique(rounded_breaks)) return(rounded_breaks) } 11.3.2 Sample Code: Barren Lands # Load raster ecotype &lt;- readRDS(&quot;outputs/Reclassified by Ecotype/Reclassified_By_Ecotype/Reclassified_Barren_Lands_log.rds&quot;) # Load Canada outline canada &lt;- ne_states(country = &quot;Canada&quot;, returnclass = &quot;sf&quot;) canada_transformed &lt;- st_transform(canada, crs(ecotype)) # Load ecozone outline ecozones &lt;- st_read(&quot;data/Ecozones/ecozones.shp&quot;, quiet = TRUE) ecozones &lt;- st_transform(ecozones, crs(ecotype)) # Find log min and max log_range &lt;- minmax(ecotype) log_min &lt;- log_range[&quot;min&quot;, 1] log_max &lt;- log_range[&quot;max&quot;, 1] # Define color palette my_colors &lt;- c(&quot;#fee485&quot;, &quot;#ed4801&quot;, &quot;#860a03&quot;, &quot;#221c05&quot;) custom_palette &lt;- colorRampPalette(my_colors)(100) # Plot par(mar = c(4, 2, 4, 6)) # Margins plot(st_geometry(ecozones), col = NA, border = NA, main = &quot;Barren Lands&quot;, xlab = NA, ylab = NA, axes = TRUE) # Base plot plot(st_geometry(canada_transformed), col = &quot;gray97&quot;, border = NA, add = TRUE) # Base for NA values plot(ecotype, col = custom_palette, legend = FALSE, main = &quot;Barren Lands&quot;, add = TRUE) #Ecotype plot plot(st_geometry(canada_transformed), add = TRUE, border = &quot;grey30&quot;, lwd = 0.2) plot(ecozones$geometry, add = TRUE, border = &quot;grey30&quot;, lwd = 0.75) # Create legend based on score table scores_df &lt;- read.csv(&quot;outputs/Ecotype_Scores_Scaled_Final.csv&quot;) filtered_scores &lt;- scores_df %&gt;% filter(Ecotype == &quot;Barren lands&quot;) min_score &lt;- min(filtered_scores$Score, na.rm = TRUE) max_score &lt;- max(filtered_scores$Score, na.rm = TRUE) label_ticks_orig &lt;- generate_pretty_log_breaks(min_score, max_score, 5) label_ticks_log &lt;- log10(label_ticks_orig + 1) # Add legend with original scores rather than log scores image.plot(legend.only = TRUE, zlim = c(log_min, log_max), col = custom_palette, legend.width = 1.5, legend.shrink = 0.8, legend.mar = 4.5, axis.args = list(at = label_ticks_log, labels = format(label_ticks_orig, big.mark = &quot;,&quot;), cex.axis = 0.9, las = 1), legend.args = list(text = &quot;Score&quot;, side = 3, font = 2, line = 1, adj = 0.1)) 11.3.3 Other Ecotypes: Maps The same workflow was applied to produce static maps for the other six ecotypes: Temperate or Sub-polar Grasslands Temperate or Sub-polar Needleleaf Forest Mixed Forest Temperate or Sub-polar Broadleaf Deciduous Forest Water Wetland Each map uses: Log₁₀-scaled raster for visual clarity Ecozone and Canada outlines for reference Legends in original score scale Raw code for each ecozone is avalaible on GitHub. 11.4 Outputs Ecotype_scores.pdf: no outlines Ecotype_scores_canada_ecozone_outline.pdf: both Canada and ecozone outlines Ecotype_scores_ecozone_outline.pdf: ecozone outline Ecotype_scores_canada.pdf: Canada outline Water.pdf Temperate or Sub-polar Broadleaf Deciduous Forest.pdf Temperate of Sub-polar Needleleaf Forest.pdf Wetland.pdf Mixed Forest.pdf Barren Lands.pdf Temperate or Sub-polar Grasslands.pdf "],["mapping-ecozones.html", "12 Mapping: Ecozones 12.1 Overview 12.2 Example Code: Arctic Cordillera 12.3 All Ecozones 12.4 Outputs", " 12 Mapping: Ecozones 12.1 Overview This section presents individual maps for each of Canada’s 15 ecozones, displaying log‑transformed ecotype scores within their respective boundaries. Each map displays: Log‑transformed ecotype scores. Legends reporting the original (non‑log) ecotype scores for easy interpretation. Inputs data/Ecozones/ecozones.shp: Ecozone shapefile (vector outlines). outputs/ecozone_rasters/log scores/*_log_score_raster.rds: Log‑transformed mosaics for each ecozone. 12.1.1 Load Libraries library(terra) library(fields) library(rnaturalearth) library(sf) library(dplyr) 12.2 Example Code: Arctic Cordillera 12.2.1 Function for Pretty Breaks ##Function to generate breaks generate_pretty_log_breaks &lt;- function(min_val, max_val, n = 5) { # Generate evenly spaced breaks on the log scale log_min &lt;- log10(min_val) log_max &lt;- log10(max_val) log_breaks &lt;- seq(log_min, log_max, length.out = n) # Convert back to original scale raw_breaks &lt;- 10^log_breaks # Round the breaks to &quot;nice&quot; numbers rounded_breaks &lt;- sapply(raw_breaks, function(x) { if (x &lt; 100) { round(x, -1) # nearest 10 } else if (x &lt; 1000) { round(x, -2) # nearest 100 } else if (x &lt; 10000) { round(x, -2) # nearest 100 } else { round(x, -3) # nearest 1000 } }) # Remove duplicates and keep sorted rounded_breaks &lt;- sort(unique(rounded_breaks)) return(rounded_breaks) } ###Arctic Cordillera # Load the mosaic raster .tif score_log_raster &lt;- readRDS(&quot;outputs/ecozone_rasters/log scores/Arctic_Cordillera_log_score_raster.rds&quot;) score_log_raster &lt;- unwrap(score_log_raster) #get min and max of raster values (log scale) log_range &lt;- minmax(score_log_raster) log_min &lt;- log_range[&quot;min&quot;, 1] log_max &lt;- log_range[&quot;max&quot;, 1] #define custom color palette my_colors &lt;- c(&quot;#fff9db&quot;, &quot;#fee485&quot;, &quot;#fca944&quot;, &quot;#ed4801&quot;, &quot;#860a03&quot;, &quot;#221c05&quot;) custom_palette &lt;- colorRampPalette(my_colors)(100) par(oma = c(0, 0, 0, 4)) #plot without legend - will add in later plot(score_log_raster, col = custom_palette, legend = FALSE, main = &quot;Arctic Cordillera Ecozone&quot;) #min and max values from spreadsheet min_val &lt;- 151 max_val &lt;- 28865 label_ticks_orig &lt;- generate_pretty_log_breaks(min_val, max_val, 5) label_ticks_log &lt;- log10(label_ticks_orig + 1) #add legend with original scores rather than log scores image.plot(legend.only = TRUE, zlim = c(log_min, log_max), col = custom_palette, legend.width = 1.5, legend.shrink = 0.8, legend.mar = 6.5, axis.args = list(at = label_ticks_log, labels = format(label_ticks_orig, big.mark = &quot;,&quot;), cex.axis = 0.9, las = 1), legend.args = list(text = &quot;Score&quot;, side = 3, font = 2, line = 1, adj = 0.1)) #Plot ecozone with it ecozones &lt;- st_read(&quot;data/Ecozones/ecozones.shp&quot;, quiet = TRUE) ecozones &lt;- st_transform(ecozones, crs(score_log_raster)) arctic_cordillera &lt;- ecozones[ecozones$ZONE_NAME == &quot;Arctic Cordillera&quot;, ] plot(arctic_cordillera$geometry, add = TRUE, border = &quot;black&quot;, lwd = 1) 12.3 All Ecozones All ecozone maps were produced following the same workflow as the Arctic Cordillera ecozone. Raw code for each ecozone is avalaible on GitHub. 12.4 Outputs Arctic Cordillera Ecozone_outline Atlantic Maritime Ecozone_outline Boreal Cordillera Ecozone_outline Boreal Plain Ecozone_outline Boreal Shield Ecozone_outline Hudson Plain Ecozone_outline Mixedwood Plain Ecozone_outline Montane Cordillera Ecozone_outline Northern Arctic Ecozone_outline Pacific Maritime Ecozone_outline Prairie Ecozone_outline Southern Arctic Ecozone_outline Taiga Cordillera Ecozone_outline Taiga Plain Ecozone_outline Taiga Shield Ecozone_outline "]]
